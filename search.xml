<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>SpringMVC和Struts2的优劣分析</title>
    <url>/2020/07/12/SpringMVC%E5%92%8CStruts2%E7%9A%84%E4%BC%98%E5%8A%A3%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="SpringMVC和Struts2的优劣分析"><a href="#SpringMVC和Struts2的优劣分析" class="headerlink" title="SpringMVC和Struts2的优劣分析"></a>SpringMVC和Struts2的优劣分析</h2><p><strong>共同点：</strong></p>
<ol>
<li>它们都是表现层的框架，都是基于MVC模型编写的。</li>
<li>它们的底层都离不开原始ServletAPI。</li>
<li>它们处理请求的机制都是一个核心控制器。</li>
</ol>
<p><strong>区别：</strong></p>
<ol>
<li>Spring MVC的入口是Servlet，而Struts2是Filter</li>
<li>Spring MVC是基于方法设计的，而Struts2是基于类的，Stuts2每次执行都会创建一个动作类。所以Spring MVC 会稍微比Struts2快些。</li>
<li>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便。</li>
<li>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提<br>升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</li>
</ol>
<p>Spring MVC中xml文件部分配置<br><img src="https://img-blog.csdnimg.cn/20200712210111403.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODY2MTY5,size_16,color_FFFFFF,t_70" alt="Spring MVC中xml文件配置"></p>
<p>struts2中xml文件部分配置<br><img src="https://img-blog.csdnimg.cn/20200712210135516.jpg" alt="struts2中xml文件配置"></p>
]]></content>
      <tags>
        <tag>SpringMVC</tag>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC的请求响应流程</title>
    <url>/2020/07/13/SpringMVC%E7%9A%84%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E7%9A%84%E7%AE%80%E6%98%93%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="SpringMVC的请求响应流程"><a href="#SpringMVC的请求响应流程" class="headerlink" title="SpringMVC的请求响应流程"></a>SpringMVC的请求响应流程</h2><ol>
<li>服务器启动，应用被加载。读取到web.xml中的配置创建spring容器并且初始化容器中的对象。</li>
<li>浏览器发送请求，被DispatherServlet捕获，该Servlet并不处理请求，而是把请求转发出去。转发的路径是根据请求URL，匹配@RequestMapping中的内容。</li>
<li>匹配到了后，执行对应的方法。该方法有个返回值。</li>
<li>根据方法的返回值，借助InternalResourceViewResolver找到对应的结果视图。</li>
<li>渲染结果视图，响应浏览器。<img src="https://img-blog.csdnimg.cn/20200713194451845.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODY2MTY5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
</ol>
<h2 id="详细响应流程图"><a href="#详细响应流程图" class="headerlink" title="详细响应流程图"></a>详细响应流程图</h2><p><img src="https://img-blog.csdnimg.cn/20200713194629540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODY2MTY5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC数据流程绑定分析</title>
    <url>/2020/07/14/SpringMVC%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B%E7%BB%91%E5%AE%9A%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>提问：<strong>前端表单传递过来的数据为什么能够自动的封装成实体类的对象？为什么能够进行自动的类型转换？</strong></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200714191129643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODY2MTY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="数据绑定流程"><a href="#数据绑定流程" class="headerlink" title="数据绑定流程"></a>数据绑定流程</h2><ol>
<li>SpringMVC框架将ServletRequest对象及目标方法的入参实例传递给WebDataBinderFactory实例，以便创建DataBinder对象。</li>
<li>DataBinder调用装配在SpringMVC上下文的ConversionService组件进行数据类型的转换和数据类型格式化操作，将ServletRequest请求参数绑定到对应目标方法的入参对象中。</li>
<li>调用Validator组件对已经绑定到了目标方法入参对象进行数据合法性的校验，并最终形成数据绑定的结果到BindingData对象。</li>
<li>SpringMVC将数据校验、格式化、转换的错误信息封装到BindingResult对象中。</li>
</ol>
]]></content>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC请求参数绑定</title>
    <url>/2020/07/14/SpringMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="一、支持的数据类型"><a href="#一、支持的数据类型" class="headerlink" title="一、支持的数据类型"></a>一、支持的数据类型</h2><p> <strong>1. 基本类型参数</strong></p>
<pre><code>包括基本类型和String类型</code></pre><p> <strong>2. POJO类型参数</strong></p>
<pre><code>包括实体类，以及关联的实体类</code></pre><p> <strong>3. 数组和集合类型参数</strong></p>
<pre><code>包括List结构和Map结构的集合（包括数组）</code></pre><h2 id="二、使用要求"><a href="#二、使用要求" class="headerlink" title="二、使用要求"></a>二、使用要求</h2><p><strong>1. 如果是基本数据类型或者String类型：</strong></p>
<p>要求我们的参数名称必须和控制器中的方法的形参名称保持一致。（严格区分大小写）<br><img src="https://img-blog.csdnimg.cn/20200713211632436.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODY2MTY5,size_16,color_FFFFFF,t_70#pic_left" alt="在这里插入图片描述"></p>
<p> <strong>2. 如果是POJO类型，或者它的关联对象：</strong></p>
<p>要求表单中的参数名称和POJO类的属性名称保持一致。并且控制器方法中的参数类型是POJO类型。</p>
<p><img src="https://img-blog.csdnimg.cn/20200713211819146.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODY2MTY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/2020071321195290.jpg#pic_left" alt="在这里插入图片描述"></p>
<p> <strong>3. 如果是集合类型：</strong></p>
<p>要求集合类型的请求参数必须在 POJO 中。在表单中请求参数名称要和 POJO 中集合属性名称相同。<br>给 List 集合中的元素赋值，使用下标。<br>给 Map 集合中的元素赋值，使用键值对。<br><img src="https://img-blog.csdnimg.cn/20200713212036265.jpg#pic_left" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200713212122351.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODY2MTY5,size_16,color_FFFFFF,t_70#pic_left" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC自定义类型转换器</title>
    <url>/2020/07/14/SpringMVC%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SpringMVC上下文中内建了很多的类型转换器，可以完成绝大多数的Java类型的转换工作。<br><img src="https://img-blog.csdnimg.cn/20200714193454984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODY2MTY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><hr></p>
<p><strong>ConversionService是类型转换核心接口。<br>可以利用ConversionServiceFactoryBean在SpringIOC容器中定义一个ConversionService，<br>Spring将自动的识别IOC容器中的ConversionService，<br>并在bean属性配置以及SpringMVC处理方法入参绑定等场合使用这个ConversionService进行数据类型转换。<br>所以可以通过ConversionServiceFactoryBean的converters属性注册自定义类型转换器。</strong></p>
<hr>


<h2 id="Spring支持的类型转换器"><a href="#Spring支持的类型转换器" class="headerlink" title="Spring支持的类型转换器"></a>Spring支持的类型转换器</h2><p>Spring中定义了三种类型转换的接口，实现任意一个接口都可以作为自定义的类型转换器，自定义的类型转换器注册到ConversionServiceFactoryBean中，类型转换器就生效了。</p>
<ul>
<li>Converter&lt;S,T&gt;  <strong>(常用的一种</strong>）</li>
<li>ConverterFactory</li>
<li>GenericConverter</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String sex;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", sex="</span> + sex + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写页面</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/insertstu"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">	&lt;input type=<span class="string">"text"</span> name=<span class="string">"student"</span> value=<span class="string">"YYY-Male-22"</span>&gt;</span><br><span class="line">	&lt;button&gt;Submit&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>编写请求处理器的目标方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"insertstu"</span>,method=RequestMethod.POST)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testConverter</span><span class="params">(@RequestParam(<span class="string">"student"</span>)</span> Student student) </span>&#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(student);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>编写自动义的类型转换器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nhkj.util;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"><span class="keyword">import</span> com.nhkj.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToStudentConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Student <span class="title">convert</span><span class="params">(String arg0)</span> </span>&#123;</span><br><span class="line">		Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//分割字符串</span></span><br><span class="line">		String properties[] = arg0.split(<span class="string">"-"</span>);</span><br><span class="line">		</span><br><span class="line">		stu.setName(properties[<span class="number">0</span>]);</span><br><span class="line">		stu.setSex(properties[<span class="number">1</span>]);</span><br><span class="line">		stu.setAge(Integer.parseInt(properties[<span class="number">2</span>]));</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> stu;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>配置文件</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 配置ConversionFactoryBean 的 converters 属性 --&gt;</span><br><span class="line"> &lt;bean id=<span class="string">"conversionService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">	  	&lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">	  		&lt;set&gt;</span><br><span class="line">				&lt;bean class="com.nhkj.util.StringToStudentConverter"&gt;&lt;/bean&gt;</span><br><span class="line">			&lt;/set&gt;</span><br><span class="line">	  	&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line"> &lt;mvc:annotation-driven conversion-service="conversionService"&gt;&lt;/mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC数据校验</title>
    <url>/2020/07/16/SpringMVC%E2%80%94%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>JSP303是Java为bean数据合法性校验提供的标准框架，已经包含在JavaEE6.0中，JSR303是通过在Bean的属性上面注解类型于@Null，@NotNull，@Max等标准的注解指定校验规则，并通过标准的接口对bean的属性进行验证。</p>
<p>常用注解(<strong>注意在方法入参前加注解 @Valid</strong>）<br>| 序号 | 注解 | 说名 |<br>|–|–|–|<br>| 1 | @Null | 被注解的属性必须为NULL  |<br>| 2 | @NotNull  | 被注解的属性不能为空 |<br>| 3 | @Past | 被注解的属性必须是一个过去的日期 |<br>| 4 | @Future | 被注解的属性必须是一个未来的日期 |<br>| 5 | @Pattern | 被注解的属性必须满足正则表达式 |<br>| 6 | @Max | 被注解的属性不能大于指定的最大值 |<br>| 7 | @Min | 被注解的属性不能小于指定的最小值 |</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer empId;</span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> String empName;</span><br><span class="line"><span class="keyword">private</span> String empMail;</span><br><span class="line"><span class="keyword">private</span> Integer empGender;</span><br><span class="line"><span class="keyword">private</span> Integer deptId;</span><br><span class="line"><span class="keyword">private</span> Dept dept;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"emp"</span>,method=RequestMethod.POST)</span><br><span class="line">	<span class="comment">//校验失败的信息都会绑定到BindingResult中，BindingResult对象可以作为处理器目标方法的入参。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">insertEmp</span><span class="params">(@Valid Emp emp,BindingResult result)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(emp);</span><br><span class="line">		<span class="comment">//this.empManagerSerivce.insertEmp(emp);</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(result.getErrorCount() &gt; <span class="number">0</span>) &#123; <span class="comment">//如果错误数量大于0</span></span><br><span class="line">			List&lt;FieldError &gt; errors = result.getFieldErrors();<span class="comment">//获取所有的错误信息</span></span><br><span class="line">			<span class="keyword">for</span> (FieldError error : errors) &#123;</span><br><span class="line">				System.out.println(error.getField() +<span class="string">"-----"</span>+error.getDefaultMessage());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<p> <strong>结果：当前端传来的数据中empName为null时，控制台打印错误。</strong></p>
<hr>

<h2 id="二、Hibernate-Valiidator扩展注解"><a href="#二、Hibernate-Valiidator扩展注解" class="headerlink" title="二、Hibernate Valiidator扩展注解"></a>二、Hibernate Valiidator扩展注解</h2><p>是JSR303的一个参考的实现，并且除了支持基本的校验注解外，还进行了扩展：</p>
<ul>
<li>@Email：必须符合电子邮箱格式<ul>
<li>@Length：字符串长度必须在指定范围内</li>
<li>@NotEmpty：必须非空</li>
<li>@Range：必须在指定的返回内 </li>
</ul>
</li>
</ul>
<p>需要加入Jar包：<br>        classmate-0.8.0.jar<br>        hibernate-validator-5.0.0.CR2.jar<br>        hibernate-validator-annotation-processor-5.0.0.CR2.jar<br>        jboss-logging-3.1.1.GA.jar<br>        validation-api-1.1.0.CR1.jar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">private</span> String empName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Email</span></span><br><span class="line"><span class="keyword">private</span> String empMail;</span><br><span class="line"><span class="keyword">private</span> Integer empGender;</span><br><span class="line"><span class="keyword">private</span> Integer deptId;</span><br><span class="line"><span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Range</span>(min=<span class="number">1000</span>,max=<span class="number">9000</span>)</span><br><span class="line"><span class="meta">@NumberFormat</span>(pattern=<span class="string">"#,###,###,###.#"</span>)</span><br><span class="line"><span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Past</span></span><br><span class="line"><span class="meta">@DateTimeFormat</span>(pattern=<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC数据格式化</title>
    <url>/2020/07/16/SpringMVC%E2%80%94%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>数据格式化也属于类型转换的范畴。<br>Spring在格式化模块中定义了一个实现<strong>ConversionService接口</strong>的<strong>FormattingConversionService实现类</strong>，该实现类即有类型转换的功能，也有格式化的功能。这个实现类拥有一个工厂FormattingConversionServiceFactoryBean工厂类，该工厂类就是用于Spring中构造FormattingConversionService实现类的。<br>该工厂类已经在内部注册了：<br>    - <strong>@NumberFormat</strong>注解：用于进行数字类型的格式化<br>    - <strong>@DateFormat</strong>注解：用来进行日期类型的格式化（<strong>可以解决字符串转换为Date类型的问题</strong> ）</p>
<p><strong>例题</strong>：Student中加入salary和birthday属性，需要对工资和生日进行格式化</p>
<ul>
<li>Student中加入salary和birthday属性，并且制定格式化类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String sex;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@NumberFormat</span>(pattern=<span class="string">"#,###,###.#"</span>)</span><br><span class="line">	<span class="keyword">private</span> Double salary;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@DateTimeFormat</span>(pattern=<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">	<span class="keyword">private</span> Date birthday;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Double <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> salary;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(Double salary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.salary = salary;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", sex="</span> + sex + <span class="string">", age="</span> + age + <span class="string">", salary="</span> + salary + <span class="string">", birthday="</span></span><br><span class="line">				+ birthday + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>springmvc.xml配置</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">  mvc:annotation-driven : 开启对springmvc注解的支持</span><br><span class="line">  	conversion-service ： 配置SpringMVC上下文中中的类型转换器</span><br><span class="line">  		- 不配置：使用默认的</span><br><span class="line">  		- 配置：默认的+配置的</span><br><span class="line">   --&gt;</span><br><span class="line">&lt;mvc:annotation-driven conversion-service="conversionService"&gt;&lt;/mvc:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置ConversionServiceFactoryBean --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"conversionService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">	&lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">		&lt;set&gt;</span><br><span class="line">		&lt;!-- 自己定义的类型转换 --&gt;</span><br><span class="line">			&lt;bean class="com.nhkj.util.StringToStudentConverter"&gt;&lt;/bean&gt;</span><br><span class="line">		&lt;/set&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>


<h2 id="解决字符串转换为Date类型的问题"><a href="#解决字符串转换为Date类型的问题" class="headerlink" title="解决字符串转换为Date类型的问题"></a>解决字符串转换为Date类型的问题</h2><p>  <strong>方法一：数据格式化</strong></p>
<p> 注意：前端传输的时间字符串格式要和注解指定的格式一致，不然会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testStringToDate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testStringToDate</span><span class="params">(@DateTimeFormat(pattern=<span class="string">"yyyy-MM-dd"</span>)</span> Date birthday) </span>&#123;</span><br><span class="line">	System.out.println(birthday);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>方法二：自定义类型转换器</strong></p>
<ul>
<li>编写自定义类型转换器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String arg0)</span> </span>&#123;</span><br><span class="line">		DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(arg0 == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"请输入要转换的日期"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Date date = format.parse(arg0);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> date;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入日期有误"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>springmvc.xml配置文件</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置类型转换工厂 --&gt;</span><br><span class="line">	&lt;bean id=<span class="string">"converterService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">		&lt;!-- 给工厂注入一个新的类型转换器 --&gt;</span><br><span class="line">		&lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">			&lt;array&gt;</span><br><span class="line">				&lt;!-- 配置之定义的类型转换器 --&gt;</span><br><span class="line">				&lt;bean class="com.nhkj.util.StringToDateConverter"&gt;&lt;/bean&gt;</span><br><span class="line">			&lt;/array&gt;</span><br><span class="line">		&lt;/property&gt;</span><br><span class="line">	&lt;/bean&gt;</span><br><span class="line">	&lt;mvc:annotation-driven conversion-service="converterService"&gt;&lt;/mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>
<p> 测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 转换时间类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testDate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testDate</span><span class="params">(Date date)</span> </span>&#123;  <span class="comment">//前端传2020-10-10</span></span><br><span class="line">	System.out.println(date);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
</search>
